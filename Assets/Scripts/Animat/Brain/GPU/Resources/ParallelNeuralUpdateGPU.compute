// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "BrainStructs.cginc"

int neuron_activation_function;

RWStructuredBuffer<Neuron> current_state_neurons;
RWStructuredBuffer<Synapse> current_state_synapses;

RWStructuredBuffer<Neuron> next_state_neurons;
RWStructuredBuffer<Synapse> next_state_synapses;


void Execute(int i)
{
    /*
        * First do the Firing calculation 
        */
    Neuron neuron = current_state_neurons[i];

    neuron.real_num_of_synapses = 0; //for metadata

    //math.E(-1.0f / (neuron.adaptation_delta));

    // neuron voltage decay
    neuron.voltage *= neuron.decay_rate_tau;

    // sum inputs in the current
    int start_idx = (neuron.neuron_class == NEURON_CLASS_SENSOR) ? 0 : neuron.synapse_start_idx;
    int end_idx = (neuron.neuron_class == NEURON_CLASS_SENSOR) ? 0 : (neuron.synapse_start_idx + neuron.synapse_count);
    float sum = 0.0f;
    sum += neuron.bias;
    for (int j = start_idx; j < end_idx; j++)
    {
        Synapse connection = current_state_synapses[j];
        if (connection.enabled == 0) continue;
        int from_id = connection.from_neuron_idx;
        Neuron from_neuron = current_state_neurons[from_id];


        int from_sign = from_neuron.sign;
        if (from_neuron.type == NEURON_TYPE_SPIKING)
        {
            if (from_neuron.firing == 0) continue;
            sum += connection.weight * from_sign;
        }
        else //if(from_neuron.type == Neuron.NeuronType.Perceptron)
        {
            sum += connection.weight * from_sign * from_neuron.activation;
        }
        neuron.real_num_of_synapses++;
    }

 
    if (neuron.type == NEURON_TYPE_SPIKING)
    {
        neuron.voltage += sum;
        if (neuron.voltage > neuron.threshold)
        {
            // fire if the voltage exceeds threshold
            neuron.firing = 1;
        }
        else
        {
            neuron.firing = 0;
        }
    }
    else //if(next_state_neuron.type == Neuron.NeuronType.Perceptron)
    {
        if (neuron.neuron_class != NEURON_CLASS_SENSOR)
        {
            if (neuron.activation_function == NEURON_ACTIVATIONFUNCTION_SIGMOID)
            {
                neuron.activation = neuron.SigmoidSquashSum(sum);
            }
            else if (neuron.activation_function == NEURON_ACTIVATIONFUNCTION_TANH)
            {
                neuron.activation = neuron.TanhSquashSum(sum);
            }
            else if (neuron.activation_function == NEURON_ACTIVATIONFUNCTION_LEAKYRELU)
            {
                neuron.activation = neuron.LeakyReLUSum(sum);
            }
            else if (neuron.activation_function == NEURON_ACTIVATIONFUNCTION_RELU)
            {
                neuron.activation = neuron.ReLUSum(sum);
            }
            else
            {
                //error
            }
            if (!isfinite(neuron.activation))
            {
                neuron.activation = 0;
            }
        }
    }


    // set the data
    next_state_neurons[i] = neuron;

    /*
        * Second do the Hebbian learning calculation 
        */
 
    float delta_weight;
    for (int j = start_idx; j < end_idx; j++)
    {
        Synapse connection = current_state_synapses[j];
        if (connection.enabled)
        {
            int from_idx = connection.from_neuron_idx;
            Neuron from_neuron = current_state_neurons[from_idx];
            float presynaptic_firing;
            float postsynaptic_firing;
            if (from_neuron.type == NEURON_TYPE_SPIKING)
            {
                presynaptic_firing = from_neuron.firing == 1 ? 1 : 0;
                postsynaptic_firing = current_state_neurons[i].firing == 1 ? 1 : 0;
            }
            else
            {
                presynaptic_firing = from_neuron.activation;
                postsynaptic_firing = current_state_neurons[i].activation;
            }

            delta_weight = connection.learning_rate_r * (connection.coefficient_A * presynaptic_firing * postsynaptic_firing
                + connection.coefficient_B * presynaptic_firing
                + connection.coefficient_C * postsynaptic_firing
                + connection.coefficient_D);
            connection.weight += delta_weight;
        }

        if (!isfinite(connection.weight))
        {
            connection.weight = 0;
        }

        // constrain weight in [-1,1]
/*         if(connection.weight > 1)
        {
            connection.weight = 1;
        }else if(connection.weight < -1)
        {
            connection.weight = -1;
        }*/

        next_state_synapses[j] = connection; // set the data
    }
}


/*
    main function / kernel
*/
int index_offset;
#define NUM_THREADS 64
[numthreads(NUM_THREADS,1,1)]
void CSMain (uint3 thread_id: SV_DispatchThreadID)
{
    int i = thread_id.x + index_offset;
    Execute(i);
}